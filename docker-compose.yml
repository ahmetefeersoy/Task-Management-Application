version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: task_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-taskmanager}
      POSTGRES_USER: ${POSTGRES_USER:-taskuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-taskpass}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - task_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-taskuser}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: task_backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-taskuser}:${POSTGRES_PASSWORD:-taskpass}@database:5432/${POSTGRES_DB:-taskmanager}
      JWT_SECRET: ${JWT_SECRET:-your_super_secret_jwt_key_change_in_production}
      NODE_ENV: production
    depends_on:
      database:
        condition: service_healthy
    networks:
      - task_network
    volumes:
      - ./backend/prisma:/app/prisma
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api-docs"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: task_frontend
    restart: unless-stopped
    ports:
      - "5173:80"
    depends_on:
      - backend
    networks:
      - task_network
    environment:
      - VITE_API_URL=http://localhost:8080/api

networks:
  task_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
